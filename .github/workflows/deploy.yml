name: Deploy to Production

# WARNING: This workflow requires either:
# 1. A publicly accessible SSH endpoint (via Cloudflare tunnel)
# 2. A self-hosted GitHub runner on your local network
# 3. Using the webhook deployment method instead

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
        
        # Deploy files using rsync
        rsync -avz --delete \
          -e "ssh -i ~/.ssh/deploy_key" \
          --exclude '.git' \
          --exclude '.github' \
          --exclude 'node_modules' \
          --exclude '.DS_Store' \
          --exclude '*.log' \
          --exclude '.env' \
          --exclude 'metal-snake-data' \
          ./ $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/
        
        # Rebuild and restart Docker container
        ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && docker-compose build --no-cache && docker-compose up -d"
        
    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/deploy_key