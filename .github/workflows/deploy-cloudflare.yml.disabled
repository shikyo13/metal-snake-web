name: Deploy via Cloudflare Tunnel

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install cloudflared
      run: |
        # Download and install cloudflared
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo dpkg -i cloudflared-linux-amd64.deb

    - name: Setup Cloudflare Tunnel
      env:
        CF_TUNNEL_TOKEN: ${{ secrets.CF_TUNNEL_TOKEN }}
      run: |
        # Create cloudflared config directory
        mkdir -p ~/.cloudflared
        
        # If using a service token
        echo "$CF_TUNNEL_TOKEN" > ~/.cloudflared/tunnel-token

    - name: Deploy through tunnel
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
        CF_TUNNEL_NAME: ${{ secrets.CF_TUNNEL_NAME }}
      run: |
        # Setup SSH key
        mkdir -p ~/.ssh
        echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Configure SSH to use cloudflared as ProxyCommand
        cat >> ~/.ssh/config <<EOF
        Host $DEPLOY_HOST
          ProxyCommand cloudflared access ssh --hostname %h
          StrictHostKeyChecking no
          User $DEPLOY_USER
          IdentityFile ~/.ssh/deploy_key
        EOF
        
        # Deploy using rsync through the tunnel
        rsync -avz --delete \
          --exclude '.git' \
          --exclude '.github' \
          --exclude 'node_modules' \
          --exclude '.DS_Store' \
          --exclude '*.log' \
          --exclude '.env' \
          ./ $DEPLOY_HOST:$DEPLOY_PATH/

    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/deploy_key
        rm -f ~/.cloudflared/tunnel-token